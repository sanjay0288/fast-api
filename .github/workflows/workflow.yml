name: Deploy to AWS ECS

on:
  push:
    branches:
      - main 
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install dependencies from requirements.txt
        run: |
          pip install -r my-fastapi-app-cdk/requirements.txt  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
       
      - name: Install AWS CDK
        run: npm install -g aws-cdk
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      - name: Create ECR repository if it does not exist
        run: |
          aws ecr describe-repositories --repository-names my-fastapi-app || \
          aws ecr create-repository --repository-name my-fastapi-app
          
      - name: Build Docker image
        run: |
          docker build --build-arg API_KEY=${{ secrets.API_KEY }} --build-arg API_KEY_HEADER=${{ secrets.API_KEY_HEADER }} -t my-fastapi-app .
          
      - name: Tag Docker image
        run: |
          docker tag my-fastapi-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-fastapi-app
          
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-fastapi-app
      - name: Deploy with AWS CDK and Capture LB URL
        run:  |
           cd my-fastapi-app-cdk
           cdk deploy --require-approval never
      - name: Get Load Balancer URL from CloudFormation Outputs
        run: |
          LB_URL=$(aws cloudformation describe-stacks --stack-name MyEcsStack --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerURL'].OutputValue" --output text)
          echo "Load Balancer URL is: $LB_URL"
          echo "LOAD_BALANCER_URL=$LB_URL" >> $GITHUB_ENV  # Make the URL available for future steps
           
      - name: Test the application URL and verify the status
        run: |
          sleep 60
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://${{ env.LOAD_BALANCER_URL }}/health")
          if [ "$STATUS" -eq 200 ]; then
            echo "Health check passed!"
          else
            echo "Health check failed with status code: $STATUS"
            exit 1  
          fi